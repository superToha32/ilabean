
1)python -m venv venv #создание виртуального окружения
2).\venv\Scripts\activate
3)django-admin startproject <имя сайта> #текущая конфигурация проекта (создание пакета)
4)cd <имя сайта>
5)python manage.py runserver
6)создание новых приложений python manage.py startapp <приложение>
<имя сайта>.settings.INSTALLED_APPS +=<приложение.apps.<Приложение>Config>

7)обработка запросов

handler404 = pageNotFound
#handler500 - ошибка сервера
#handler403 - доступ запрещен
#handler400 - невозможно обработать запрос



redirects:
301 - страница перемещена на другой постоянный URl-адрес
302 - страница перемещена временно на другой URL-адрес
from django.shortcuts import redirect
	return redirect('/',permanent=False)#302

----------------------------------------------------------------------------------------
Models Модели
WSGI-приложение <---API-интерфейс---> Django ORM---> Драйвер ORM <--->БД

Создание шаблонов-моделей происходит в <приложение>.models.py 
Миграции для баз данных - модули python для создания структур
<приложение>.migrations.py (контроль версий для данных)

создание моделей, внесение в базу данных
python manage.py makemigrations 
python manage.py sqlmigrate sells <number of migrate>
python manage.py migrate

ORM в работе с моделями ( ORM (англ. Object-Relational Mapping, рус. объектно-реляционное отображение, или преобразование) — технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая «виртуальную объектную базу данных».)
CRUD
*Create
*Read
*Update
*Delete

для работы нужно войти в консоль Django:
python manage.py shell
>>CREATE
	from <приложение-пакет>.models import <класс модели>
	создание экзепляра класса модели
	сохранение в базу данных с помощью .save().
	from django.db import connection
	connection.queries - возвращает запрос, отправляемый в БД.
	каждый класс модели имеет объект objects с ссылкой на специальный класс меджер**
	с помощью чего можно отправлять запросы в БД без создания экземпляров класса
	например: p = Product.objects.create(title='Акция',content='Sberbank')
  READ 
	Product.objects.all()-выводит все объекты в БД
	Product.objects.filter(условие).order_by(атрибут)
	<имя атрибута>__gte -сравнение больше или равно
	<имя атрибута>__lte -сравнение меньше или равно
	Product.objects.exclude(условие) - обратный filter
	Product.objects.get(условие) -может выдать исключение (применяется при проверке наличия пользователя)
  UPDATE
	p = Product.objects.get(pk=...)
	p.title = ...
	p.save()
  DELETE
	p = Product.objects.get(pk=...)
	p.delete() 
	
-----------------------------------------------------------------------------------------
второй компонент паттерна MTV:
templates Шаблоны - нужны для отделения логики приложения от его представления
по умолчанию их можно найти в settings.py
добавлять нужно через новую папку и вставку в views.py с помощью render


в боевом режиме сайт будет брать статические файлы только из папки static
статические объекты и их место хранения:
*STATIC_URL - префикс URL-адреса для статических файлов
*STATIC_ROOT - путь к общей статической папке, используемой реальным веб-сервером.
*STATICFILES_DIRS - список дополнительных путей к статическим файлам, используемых для сбора и для режима отладки
static/
	<название пакета>/
		css - стили
		js
		image

#Jinja -шаблонизатор

взаимодействие между моделями просходит с помощью ключевых слов:
ForeignKey - для связей Many to One
ManyToManyField
OneToOneField